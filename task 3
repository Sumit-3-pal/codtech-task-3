#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

typedef enum {
    TOKEN_EOF = 0,
    TOKEN_INT,
    TOKEN_PLUS,
    TOKEN_MINUS,
    TOKEN_MULTIPLY,
    TOKEN_DIVIDE,
    TOKEN_LPAREN,
    TOKEN_RPAREN,
    TOKEN_IDENTIFIER,
    TOKEN_ASSIGN,
    TOKEN_SEMICOLON,
    TOKEN_PRINT
} TokenType;

typedef struct {
    TokenType type;
    char *lexeme;
    int line;
    int column;
} Token;

const char *source_code;
int current_pos = 0;
int current_line = 1;
int current_column = 1;

Token *create_token(TokenType type, const char *lexeme_start, int length) {
    Token *token = (Token *)malloc(sizeof(Token));
    if (!token) {
        fprintf(stderr, "Memory allocation failed for token.\n");
        exit(EXIT_FAILURE);
    }
    token->type = type;
    token->lexeme = (char *)malloc(length + 1);
    if (!token->lexeme) {
        fprintf(stderr, "Memory allocation failed for lexeme.\n");
        exit(EXIT_FAILURE);
    }
    strncpy(token->lexeme, lexeme_start, length);
    token->lexeme[length] = '\0';
    token->line = current_line;
    token->column = current_column;
    return token;
}

void free_token(Token *token) {
    if (token) {
        free(token->lexeme);
        free(token);
    }
}

char advance() {
    char c = source_code[current_pos];
    current_pos++;
    current_column++;
    return c;
}

char peek() {
    return source_code[current_pos];
}

void skip_whitespace() {
    while (source_code[current_pos] != '\0' && isspace(source_code[current_pos])) {
        if (source_code[current_pos] == '\n') {
            current_line++;
            current_column = 1;
        } else {
            current_column++;
        }
        current_pos++;
    }
}

Token *get_next_token() {
    skip_whitespace();

    if (source_code[current_pos] == '\0') {
        return create_token(TOKEN_EOF, "", 0);
    }

    char c = peek();
    int start_pos = current_pos;
    int start_column = current_column;

    if (isdigit(c)) {
        while (isdigit(peek())) {
            advance();
        }
        return create_token(TOKEN_INT, &source_code[start_pos], current_pos - start_pos);
    }

    if (isalpha(c) || c == '_') {
        while (isalnum(peek()) || peek() == '_') {
            advance();
        }
        int length = current_pos - start_pos;
        char *lexeme_str = (char *)malloc(length + 1);
        strncpy(lexeme_str, &source_code[start_pos], length);
        lexeme_str[length] = '\0';

        Token *t;
        if (strcmp(lexeme_str, "print") == 0) {
            t = create_token(TOKEN_PRINT, lexeme_str, length);
        } else {
            t = create_token(TOKEN_IDENTIFIER, lexeme_str, length);
        }

        free(lexeme_str);
        return t;
    }

    advance();

    switch (c) {
        case '+': return create_token(TOKEN_PLUS, "+", 1);
        case '-': return create_token(TOKEN_MINUS, "-", 1);
        case '*': return create_token(TOKEN_MULTIPLY, "*", 1);
        case '/': return create_token(TOKEN_DIVIDE, "/", 1);
        case '(': return create_token(TOKEN_LPAREN, "(", 1);
        case ')': return create_token(TOKEN_RPAREN, ")", 1);
        case '=': return create_token(TOKEN_ASSIGN, "=", 1);
        case ';': return create_token(TOKEN_SEMICOLON, ";", 1);
        default:
            fprintf(stderr, "Lexical error: Unexpected character '%c' at line %d, column %d\n", c, current_line, start_column);
            exit(EXIT_FAILURE);
    }
}

const char *token_type_to_string(TokenType type) {
    switch (type) {
        case TOKEN_EOF: return "EOF";
        case TOKEN_INT: return "INT";
        case TOKEN_PLUS: return "PLUS";
        case TOKEN_MINUS: return "MINUS";
        case TOKEN_MULTIPLY: return "MULTIPLY";
        case TOKEN_DIVIDE: return "DIVIDE";
        case TOKEN_LPAREN: return "LPAREN";
        case TOKEN_RPAREN: return "RPAREN";
        case TOKEN_IDENTIFIER: return "IDENTIFIER";
        case TOKEN_ASSIGN: return "ASSIGN";
        case TOKEN_SEMICOLON: return "SEMICOLON";
        case TOKEN_PRINT: return "PRINT";
        default: return "UNKNOWN";
    }
}

int main() {
    source_code = "print x = 42 + 5 * (y - 3);";
    
    Token *token;
    do {
        token = get_next_token();
        printf("Token: %-10s  Lexeme: '%s'  Line: %d  Column: %d\n",
               token_type_to_string(token->type), token->lexeme, token->line, token->column);
        free_token(token);
    } while (token->type != TOKEN_EOF);

    return 0;
}
